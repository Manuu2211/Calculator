{"version":3,"sources":["reportWebVitals.js","index.js","App.js"],"names":["reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","React","createElement","StrictMode","App","_useState","useState","_useState2","_slicedToArray","data","setData","calBtns","forEach","item","push","onClick","target","value","key","className","substr","length","String","eval","includes","toFixed","err","console","log"],"mappings":"6LAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHC,IAAAC,cAACD,IAAME,WAAU,KACfF,IAAAC,cAACE,IAAG,QAORrB,mlBCXA,SAASqB,MAAM,IAAAC,UACQC,oDAAS,IAAGC,WAAAC,6KAAAH,UAAA,GAA1BI,KAAIF,WAAA,GAACG,QAAOH,WAAA,GACbI,QAAQ,GAcd,MAbA,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,KAAKC,QAAQ,SAAAC,GACpCF,QAAQG,KACNb,6CAAAC,cAAA,UAAQa,QAAS,SAAA5B,GACfuB,QAAQD,KAAOtB,EAAE6B,OAAOC,QAE1BA,MAAOJ,EACPK,IAAKL,GACFA,MAOLZ,6CAAAC,cAAA,OAAKiB,UAAU,WACblB,6CAAAC,cAAA,OAAKiB,UAAU,aAAY,IAAEV,MAC7BR,6CAAAC,cAAA,OAAKiB,UAAU,qBACflB,6CAAAC,cAAA,UAAQa,QAAS,kBAAKL,QAAQD,KAAKW,OAAO,EAAEX,KAAKY,OAAO,MAAK,SAG3DpB,6CAAAC,cAAA,UAAQa,QAAS,kBAAKL,QAAQ,MAAK,OAIrCT,6CAAAC,cAAA,OAAKiB,UAAU,UAAWR,SAC3BV,6CAAAC,cAAA,OAAKiB,UAAU,qBACdlB,6CAAAC,cAAA,UAAQa,QAAS,SAAA5B,GAAC,OAAIuB,QAAQD,KAAOtB,EAAE6B,OAAOC,QAAQA,MAAM,KAAI,KAGhEhB,6CAAAC,cAAA,UAAQa,QAAS,SAAA5B,GAAC,OAAIuB,QAAQD,KAAOtB,EAAE6B,OAAOC,QAAQA,MAAM,KAAI,KAGhEhB,6CAAAC,cAAA,UAAQa,QAAS,SAAA5B,GAAC,OAAIuB,QAAQD,KAAOtB,EAAE6B,OAAOC,QAAQA,MAAM,KAAI,KAGhEhB,6CAAAC,cAAA,UAAQa,QAAS,SAAA5B,GAAC,OAAIuB,QAAQD,KAAOtB,EAAE6B,OAAOC,QAAQA,MAAM,KAAI,KAGhEhB,6CAAAC,cAAA,UAAQa,QAAS,SAAAA,QAAA5B,GACf,IACEuB,QACEY,OAAOC,KAAKd,OAAOY,OAAO,GAC5BC,OAAOC,KAAKd,OAAOe,SAAS,KAC1BF,OAAOC,KAAKd,MAAMgB,QAAQ,IAC3BH,OAAOC,KAAKd,QAGf,MAAMiB,KACJC,QAAQC,IAAIF,OAGhBT,MAAM,KAAI,OAYDb","file":"static/js/main.45ee322a.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, { useState } from 'react';\n\n\nimport './App.css';\n\nfunction App() {\n  const [data,setData]=useState(\"\");\n  const calBtns=[];\n  [9,8,7,6,5,4,3,2,1,0,\".\",\"%\"].forEach(item =>{\n    calBtns.push(\n      <button onClick={e =>{\n        setData(data + e.target.value);\n      }}\n      value={item}\n      key={item}>\n        {item}\n      </button>\n    );\n   });\n\n\n  return (\n    <div className='wrapper'>\n      <div className='showinput'> {data}</div>\n      <div className='modifiers subgrid'>\n      <button onClick={()=> setData(data.substr(0,data.length-1))}>\n          clear\n        </button>\n        <button onClick={()=> setData(\"\")}>\n          AC\n        </button>\n        </div>\n      <div className=\"digits\" >{calBtns}</div>\n     <div className='operation subgrid'>\n      <button onClick={e => setData(data + e.target.value)} value=\"+\">\n        +\n      </button>\n      <button onClick={e => setData(data + e.target.value)} value=\"-\">\n        -\n      </button>\n      <button onClick={e => setData(data + e.target.value)} value=\"*\">\n        *\n      </button>\n      <button onClick={e => setData(data + e.target.value)} value=\"/\">\n        /\n      </button>\n      <button onClick={e =>{\n        try{\n          setData(\n            String(eval(data)).length>0 &&\n          String(eval(data)).includes(\".\")\n          ? String(eval(data).toFixed(4))\n          :String(eval(data))\n          )\n        }\n        catch(err){\n          console.log(err)\n        }\n      }}\n      value=\"=\">\n        =\n      </button>\n\n     </div>\n\n     </div>\n   \n  );\n}\n\n\nexport default App;\n"],"sourceRoot":""}